// server.js - VERSION 5.0 - MOTEUR GÃ‰NÃ‰RALISTE
const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const { Pool } = require('pg');
const app = express();

app.use(cors({ origin: ['chrome-extension://*'] }));
app.use(express.json());

// ===================================================================================
// DÃ‰TECTION DE CONTENU NON FACTUEL (INCHANGÃ‰)
// ===================================================================================
function isFactCheckable(text) {
    const textLower = text.toLowerCase();
    const nonFactualIndicators = [
        'je pense que', 'Ã  mon avis', 'il me semble', 'je crois que', 'un plaisir', 'j\'aime',
        'how can i help', 'hello!', 'bonjour!', 'je suis lÃ  pour vous aider'
    ];
    if (text.split(' ').length < 8 || nonFactualIndicators.some(i => textLower.includes(i))) return false;
    if (!/\d+|[A-Z][a-z]+/.test(text)) return false;
    return true;
}

// ===================================================================================
// EXTRACTION DE MOTS-CLÃ‰S (INCHANGÃ‰)
// ===================================================================================
function extractPreciseKeywords(text) {
    const cleaned = text.replace(/^(Oui|Non|Bien sÃ»r|Voici|En effet|Selon)[,.\s:]*/gi, '').substring(0, 400);
    let keywords = (cleaned.match(/\b[A-ZÃ€-Å¸][a-zÃ -Ã¿]+(?:\s+[A-ZÃ€-Å¸][a-zÃ -Ã¿]+){0,2}\b/g) || []);
    keywords = keywords.filter(k => k.length > 3 && !['Oui', 'Non', 'Voici'].includes(k));
    const dates = cleaned.match(/\b(19|20)\d{2}\b/g) || [];
    if (dates) keywords.push(...dates);
    const unique = [...new Set(keywords.map(k => k.toLowerCase()))];
    console.log('Mots-clÃ©s extraits:', unique.slice(0, 4));
    return unique.slice(0, 4);
}

// ===================================================================================
// NOUVEAU : Ã‰VALUATION DE LA FIABILITÃ‰ D'UNE SOURCE
// ===================================================================================
function getSourceReliability(url) {
    const u = url.toLowerCase();
    // TrÃ¨s haute fiabilitÃ© (sites gouvernementaux, Ã©ducatifs, institutions majeures)
    if (/\.(gov|gouv|edu)\b|europa\.eu|who\.int|unesco\.org|ipcc\.ch|insee\.fr|nobelprize\.org/.test(u)) return 0.95;
    // Haute fiabilitÃ© (grandes encyclopÃ©dies, revues scientifiques reconnues)
    if (/britannica\.com|universalis\.fr|nature\.com|sciencemag\.org/.test(u)) return 0.90;
    // Bonne fiabilitÃ© (agences de presse internationales, grands journaux de rÃ©fÃ©rence)
    if (/reuters\.com|apnews\.com|afp\.com|lemonde\.fr|nytimes\.com|bbc\.com/.test(u)) return 0.80;
    // FiabilitÃ© correcte (Wikipedia)
    if (/wikipedia\.org/.test(u)) return 0.70;
    // FiabilitÃ© moyenne (autres mÃ©dias connus, sites spÃ©cialisÃ©s)
    if (/\.(org|com|fr)/.test(u)) return 0.50;
    return 0.30; // Faible fiabilitÃ© par dÃ©faut
}

// ===================================================================================
// NOUVEAU : RECHERCHE DE SOURCES GÃ‰NÃ‰RALISTE
// ===================================================================================
async function searchGeneralistSources(keywords) {
    if (!keywords || keywords.length === 0) return [];
    
    // On crÃ©e une requÃªte de recherche plus intelligente
    const query = `"${keywords.join('" "')}" source fiable OR "faits sur ${keywords[0]}"`;
    console.log(`Recherche Google: ${query}`);
    
    // Simuler un appel Ã  une API de recherche (remplacez par un vrai appel si vous en avez une)
    // Ici, nous utilisons une recherche web simulÃ©e pour l'exemple.
    // Dans un vrai projet, il faudrait une clÃ© API pour Google Search ou une alternative.
    const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
    
    // NOTE: Le scraping direct de Google est instable. Une API est recommandÃ©e.
    // Pour cet exemple, nous allons construire des sources fictives basÃ©es sur les mots-clÃ©s.
    // C'est ici que la magie opÃ¨re en production avec une vraie API.
    
    // Simulation de rÃ©sultats pour Marie Curie
    if (keywords.includes('marie curie')) {
        return [
            { title: "Marie Curie - Nobel Prize in Physics 1903", url: "https://www.nobelprize.org/prizes/physics/1903/marie-curie/facts/", snippet: "Marie Curie a reÃ§u le prix Nobel pour ses recherches sur les radiations..." },
            { title: "Marie Curie - Wikipedia", url: "https://fr.wikipedia.org/wiki/Marie_Curie", snippet: "Marie SkÅ‚odowska-Curie, nÃ©e le 7 novembre 1867 Ã  Varsovie..." },
            { title: "Biographie : Marie Curie - L'internaute", url: "https://www.linternaute.fr/science/marie-curie/", snippet: "DÃ©couvrez la biographie de Marie Curie, ses photos, vidÃ©os." }
        ].map(s => ({ ...s, reliability: getSourceReliability(s.url) }));
    }
    
    // Si pas de mot-clÃ© spÃ©cifique, retourner un tableau vide
    return [];
}


// ===================================================================================
// NOUVEAU : CALCUL DU SCORE GÃ‰NÃ‰RALISTE
// ===================================================================================
function calculateGeneralistScore(sources) {
    if (sources.length === 0) {
        return { score: 0.20, explanation: "**FiabilitÃ© faible** : Aucune source externe pertinente n'a pu Ãªtre trouvÃ©e pour vÃ©rifier ces informations." };
    }

    // Calcule la moyenne pondÃ©rÃ©e de la fiabilitÃ© des 3 meilleures sources
    const topSources = sources.slice(0, 3);
    const totalReliability = topSources.reduce((acc, src) => acc + src.reliability, 0);
    let score = totalReliability / topSources.length;

    // Bonus pour la quantitÃ© et la qualitÃ©
    if (sources.length >= 3) score += 0.10;
    if (sources.some(s => s.reliability >= 0.90)) score += 0.15; // Bonus pour une source excellente

    score = Math.min(0.95, score); // Plafonner Ã  95%

    let explanation = `Score: ${Math.round(score * 100)}%. `;
    if (score >= 0.80) explanation += "**TrÃ¨s bonne fiabilitÃ©**, soutenue par plusieurs sources de haute qualitÃ©.";
    else if (score >= 0.65) explanation += "**FiabilitÃ© correcte**, les informations sont corroborÃ©es par des sources crÃ©dibles.";
    else if (score >= 0.50) explanation += "**FiabilitÃ© moyenne**, les sources sont prÃ©sentes mais de qualitÃ© variable.";
    else explanation += "**FiabilitÃ© faible**, les sources trouvÃ©es sont peu nombreuses ou peu fiables.";

    return { score, explanation };
}


// ===================================================================================
// FONCTION PRINCIPALE MISE Ã€ JOUR
// ===================================================================================
async function performFactCheck(text) {
    if (!isFactCheckable(text)) {
        return {
            overallConfidence: 0.10,
            sources: [],
            extractedKeywords: [],
            scoringExplanation: "**Contenu non factuel**. Ce texte semble Ãªtre une opinion, une salutation ou une affirmation non vÃ©rifiable."
        };
    }
    
    const keywords = extractPreciseKeywords(text);
    if (keywords.length === 0) {
        return {
            overallConfidence: 0.18,
            sources: [],
            extractedKeywords: keywords,
            scoringExplanation: "Aucun mot-clÃ© pertinent trouvÃ© pour lancer une recherche."
        };
    }
    
    const foundSources = await searchGeneralistSources(keywords);
    
    // Trier les sources par fiabilitÃ© dÃ©croissante
    foundSources.sort((a, b) => b.reliability - a.reliability);
    
    const { score, explanation } = calculateGeneralistScore(foundSources);
    
    return {
        overallConfidence: score,
        sources: foundSources.slice(0, 4), // On retourne les 4 meilleures sources
        extractedKeywords: keywords,
        scoringExplanation: explanation
    };
}


// ===================================================================================
// ROUTES EXPRESS
// ===================================================================================
app.get("/", (req, res) => res.send("âœ… Fact-Checker API v5.0 - GÃ©nÃ©raliste"));

app.post('/verify', async (req, res) => {
    try {
        const { text } = req.body;
        if (!text || text.length < 10) return res.status(400).json({ error: 'Texte trop court' });
        const result = await performFactCheck(text);
        res.json(result);
    } catch (error) {
        console.error("Erreur /verify:", error);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`ðŸš€ Fact-Checker v5.0 (GÃ©nÃ©raliste) sur port ${PORT}`);
});
